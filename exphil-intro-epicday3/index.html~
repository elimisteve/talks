<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>CrypTag: Building Encrypted, Taggable, Searchable Zero-knowledge Systems</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/black.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
              <section data-markdown><script type="text/template">


# CrypTag

## Building Encrypted, Taggable, Searchable Zero-knowledge Systems

Steven Phillips / @elimisteve

DEF CON's Crypto & Privacy Village

2015.08.08

</script></section>
<section data-markdown><script type="text/template">

# The Problem/Need

- We need to be able access our data over the internet without trusting the party storing it

- Non-technical users can't or won't self-host (when self-hosting is even possible)

</script></section>
<section data-markdown><script type="text/template">

# Current Compromises

- Data is stored unencrypted (loss of privacy)
  - Almost everything we use is like this
  - Dropbox, Box, Google Drive, etc

- Data is stored encrypted, but can't be searched by the server
  - Encrypted backup (e.g., Tarsnap)

</script></section>
<section data-markdown><script type="text/template">

# Current Compromises (2)

- Data stays on one device
  - Then you can't access your own data from your own devices

None of these compromise "solutions" (1) allow the server to store your encrypted data, (2) let you remotely query this data and get back just the data you want (without having to download all of it, which can be impractical), and (3) reveal nothing about the nature of the data to the server storing it.

</script></section>
<section data-markdown><script type="text/template">

# Bottom Line

Our data needs to be stored in encrypted storage systems for privacy, accessible from anywhere for convenience, but these systems need to be more practical -- and server-side search would help.

"But the server can't search through your encrypted data without the encryption key!"  Or can it?

</script></section>
<section data-markdown><script type="text/template">

# What is CrypTag?

- CrypTag is a Go library for building encrypted, taggable, searchable zero-knowledge systems

- Lets you send a search query to a server that's storing your _encrypted_ data, and only send you back the matching pieces of data
  - E.g., "Of all my data, just give me my _photos_ of _Paris_"

</script></section>
<section data-markdown><script type="text/template">

# What is CrypTag? (2)

- The server searching through this data has no idea what it is, and it doesn't know what you're searching for.  And yet, it finds it for you.

</script></section>
<section data-markdown><script type="text/template">

# How CrypTag Works

Two concepts: **TagPairs**, and **Rows**.

TagPairs associate the human-readable plain text tag (e.g., 'paris' or
'gmail') with a randomly-generated string _that the server stores in
plain text_.

</script></section>
<section data-markdown><script type="text/template">

# How CrypTag Works (2)

Example TagPairs stored on server:

```
    {
      "plain_encrypted": "NtZ+WzjTtyWdjOPX6uqr308voeOE",
      "random":          "9xvv87937"
    }

    {
      "plain_encrypted": "/1BijKByz4JqYzOTtJEoD4TlPy2FwZf0WrXG2gwZOX1ATN3/MA==",
      "random":          "fqmt5fkw8"
    }
```

</script></section>
<section data-markdown><script type="text/template">

# How CrypTag Works (3)

Data is stored in "Rows".  Rows store arbitrary data and associated
tags.  Example Row stored on server:

    {
      "data": "OcSufyNLTXwrjWW3ZSkWiVOBaM4OqJwevuFAO5RM",
      "tags": ["9xvv87937", "fqmt5fkw8"]
    }

</script></section>
<section data-markdown><script type="text/template">

# Demo: Row and TagPair Creation, Step by Step

Using the cryptpass demo app, tell CrypTag to create a new Row (of
arbitrary data) + associated tags

    cryptpass create mycr4zy4ssp4ss gmail email cryptagdemo@gmail.com tag4

</script></section>
<section data-markdown><script type="text/template">

CrypTag then...

1. Fetches all existing TagPairs from the server

2. Decrypts the encrypted human-readable tags (e.g., 'email')

3. Locally creates new TagPairs for the tags that don't already exist, generating new random tags associated

4. Locally creates a Row consisting of encrypted data (e.g., 'mycr4zy4ssp4ss') and the associated _randomly-generated plaintext tags_

5. Uploads the TagPairs and Row to the server

</script></section>
<section data-markdown><script type="text/template">

# Features

- NaCl-based crypto
  - ("Networking and Cryptography Library", not Native Client)
  - Libraries in many languages (JS, Python, etc)
- Pluggable backends
  - Next: Amazon S3 bucket
  - Webserver + filesystem
  - Webserver + database
  - SSH (coming soon)

</script></section>
<section data-markdown><script type="text/template">

# More on Pluggable Backends

(Used by client programs)

```
type Backend interface {
	Encrypt(plain []byte, nonce *[24]byte) ([]byte, error)
	Decrypt(cipher []byte, nonce *[24]byte) ([]byte, error)

	AllTagPairs() (types.TagPairs, error)
	TagPairsFromRandomTags(randtags []string) (types.TagPairs, error)
	SaveTagPair(*types.TagPair) (*types.TagPair, error)

	RowsFromPlainTags(plaintags []string) (types.Rows, error)
	SaveRow(*types.Row) (*types.Row, error)
}
```

</script></section>
<section data-markdown><script type="text/template">

# Comparing Alternatives

## Tarsnap

- Simple encrypted backups

- Can query files by filename

- No search

</script></section>
<section data-markdown><script type="text/template">

# Comparing Alternatives (2)

## Crypton (from SpiderOak)

- More complex
  - "Session objects are required to interact with Transaction-based classes, like Containers and Messages."
  - Node, Postgres, Redis
  - WebSockets
- Transactions

</script></section>
<section data-markdown><script type="text/template">

- But more full-featured
  - Auth built in
  - Messaging :-)
- No search

</script></section>
<section data-markdown><script type="text/template">

# Comparing Alternatives (3)

## Tahoe-LAFS

- Good sharing model
  - Different key for each file
- Awesome replication model
- Built-in file versioning
- I _can't wait_ for RAIC and Magic Folders!

</script></section>
<section data-markdown><script type="text/template">

- Unfortunately, to get your data, you need the URL + contained password of every file/directory
  - Idea: how about storing these URLs using CrypTag? :-)

- No search

</script></section>
<section data-markdown><script type="text/template">

# My Fantasy (well, one of them)

- CrypTag app + Cheap, untrusted storage => Tag-searchable, zero-knowledge `_______`
  - Dropbox
    - Store all your data in S3? your own server?
  - Mailpile emails?
    - "...you can use Mailpile with an existing GMail account, improving your privacy by configuring Mailpile to download the mail and then delete it from Google's servers."

</script></section>
<section data-markdown><script type="text/template">

  - Notes?
  - Bookmarks? (my original use case)
  - Contacts?
  - Anything but rapidly-updating data? or GIANT data you don't want to query?

</script></section>
<section data-markdown><script type="text/template">

# Upcoming Additions to CrypTag

- Timestamps
  - "Give me the latest 10 files with the tags 'paris' and 'type:photo'"
  - Allows for efficient updating of locally-cached TagPair
  - Enables easy versioning!
    - "Give me the most recent Row with tag 'filename:mydocument.doc'"

</script></section>
<section data-markdown><script type="text/template">

- Sharing(?)
  - Different key for each piece of encrypted data (Row)?
  - Problem: which key is used to encrypt the TagPairs?
    - Encrypt TagPairs with your own key?
    - You can search your own server, others can't?
    - Then you can still link people to individual pieces of data without giving up your main key, just the key for that data
  - Need to think more about this

- Row deletion might be handy...

</script></section>
<section data-markdown><script type="text/template">

# Mobile Support

- Go 1.5 supports Android and iOS!
  - Go 1.5rc1 hit 2 days ago
  - Call CrypTag-wielding Go program/library from your mobile app

- Ubuntu Touch apps can be written in Go (or JS, or C++)

</script></section>
<section data-markdown><script type="text/template">

# My Goals with CrypTag

- Convince project developers to use CrypTag
  - ...or at least _the idea_ of CrypTag (mostly TagPairs)

- Build useful apps with CrypTag
  - Send me requests/ideas: @elimisteve

- Create CrypTag libraries for Python, JavaScript

</script></section>
<section data-markdown><script type="text/template">

# My Goals with CrypTag (2)

- Write more CrypTag storage backends
  - Webserver + file system storage backend almost done
  - Next: Amazon S3 bucket
  - Google Drive? Azure Cloud Storage?
  - Web server + actual database?

</script></section><section data-markdown>
<script type="text/template">

- Write data migration/re-keying tool
  - Other devices just need crypto key and server info (auth credentials and URL)

- Explicit threat model

- Proper security audit of all < 1000 SLOC

</script></section><section data-markdown>
<script type="text/template">

# Technical Thank Yous

- Jonathan Rudenberg
  - Crypto recommendation: AES -> NaCl's secretbox

- Joe Andrieu, Garrett Holmstrom, Sam Dolan
  - Data migration, re-keying, sharing

</script></section>
<section data-markdown><script type="text/template">

# Personal Thank Yous

- Jacob Appelbaum

- AJ Bahnken

- Gabrielle Molina

</script></section>
<section data-markdown><script type="text/template">

# CrypTag

github.com/elimisteve/cryptag

Send me feedback/ideas: @elimisteve

THANK YOU to the Crypto & Privacy Village organizers!
    

</script></section>

			</div>

		</div>

        <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/headjs/0.96/head.min.js"></script> -->
		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>

			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// Optional reveal.js plugins
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
